service: xintern-users-api # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
plugins:
  - serverless-domain-manager


provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-2
  environment:
    MONGO_URL: "${self:custom.tokens.MONGO_TEST}"
    TOKEN_SECRET: "${self:custom.tokens.TOKEN_SECRET}"

package:
  exclude:
    - tokens.yml

custom:
  stage: ${opt:stage, self:provider.stage}
  tokens: ${file(tokens.yml):${self:custom.stage}}
  customDomain:
    domainName: 'api.xintern.co' # Change this to your domain.
    basePath: 'user' # This will be prefixed to all routes
    stage: ${self:provider.stage}
    createRoute53Record: true

functions:
  createUser:
    handler: api-handler.createUser
    events:
      - http:
          path: /
          method: POST
          cors: true
  patchAdminUser:
    handler: api-handler.patchAdminUser
    events:
      - http:
          path: admin/{userId}
          method: PATCH
          cors: true
  login:
    handler: api-handler.login
    events:
      - http:
          path: login
          method: POST
          cors: true
  getUserByUsername:
    handler: api-handler.getUserByUsername
    events:
      - http:
          path: /{username}
          method: GET
          request:
            parameters:
              paths:
                username: true
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
